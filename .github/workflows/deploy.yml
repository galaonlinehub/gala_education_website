name: Deploy to VPS

on:
  push:
  #   workflows: ["Code Quality Check"]  
  #   types:
  #     - completed
  #   branches:
  #     - develop
  #     - main
  # workflow_dispatch:  # Allows manual triggering when needed

env:
  NODE_VERSION: '18.17.0'
  PM2_APP_NAME: 'nextjs'

jobs:
  deploy:
    name: Deploy to VPS
    # Only run if the Code Quality Check workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.workflow_run.head_branch }}  # Uses branch name as environment
    
    # Prevent concurrent deployments
    concurrency: 
      group: deploy-${{ github.event.workflow_run.head_branch }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0  # Fetch all history for git commands

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          DEPLOY_PATH: ${{ secrets.PROJECT_PATH }}
          NODE_ENV: production
          DEPLOY_USER: ${{ secrets.VPS_USER }}
          DEPLOY_HOST: ${{ secrets.VPS_HOST }}
          DEPLOY_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          # Create deployment script
          cat << 'EOF' > deploy.sh
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment for branch ${DEPLOY_BRANCH}..."
            
            # Navigate to project directory
            cd $DEPLOY_PATH
            
            # Backup current .env file if it exists
            if [ -f .env ]; then
              cp .env .env.backup
            fi
            
            echo "üì• Pulling latest changes..."
            git fetch origin ${DEPLOY_BRANCH}
            git reset --hard origin/${DEPLOY_BRANCH}
            
            echo "üì¶ Installing dependencies..."
            npm ci --production
            
            # Restore .env file
            if [ -f .env.backup ]; then
              mv .env.backup .env
            fi
            
            echo "üèóÔ∏è Building application..."
            npm run build
            
            echo "üßπ Clearing Next.js cache..."
            rm -rf .next/cache
            
            echo "üîÑ Restarting PM2 process..."
            if pm2 list | grep -q "${PM2_APP_NAME}"; then
              pm2 reload ${PM2_APP_NAME} --update-env
            else
              pm2 start npm --name "${PM2_APP_NAME}" -- start
            fi
            
            echo "‚úÖ Deployment completed successfully!"
          EOF
          
          # Make script executable
          chmod +x deploy.sh
          
          # Copy and execute script on remote server
          scp ./deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy.sh
          ssh $DEPLOY_USER@$DEPLOY_HOST "bash /tmp/deploy.sh"
          
          # Cleanup
          ssh $DEPLOY_USER@$DEPLOY_HOST "rm /tmp/deploy.sh"

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 10  # Wait for service to start
          curl --fail --silent --head ${{ secrets.APP_URL }} || (echo "‚ùå Deployment verification failed" && exit 1)
          echo "‚úÖ Deployment verified successfully!"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Deployment failed! Please check the logs for more details."