name: deploy

on:
  workflow_dispatch:

  # workflow_run:
  #   workflows: ["Checker"]
  #   types:
  #     - completed
  #   branches:
  #     - develop
  #     - main
  # workflow_dispatch:

env:
  NODE_VERSION: "22.14.0"

permissions:
  actions: read
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy to VPS
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    runs-on: ubuntu-22.04
    environment:
      name: ${{ github.event.workflow_run.head_branch }}

    concurrency:
      group: deploy-${{ github.event.workflow_run.head_branch }}
      cancel-in-progress: true

    steps:
      - name: Set deployment variables
        id: set-vars
        run: |
          if [ "${{ github.event.workflow_run.head_branch }}" = "main" ]; then
            echo "DEPLOY_PATH=/var/www/next-main" >> $GITHUB_ENV
            echo "PM2_APP_NAME=main" >> $GITHUB_ENV
            echo "DOMAIN=edu.galahub.org" >> $GITHUB_ENV
            echo "PORT=3457" >> $GITHUB_ENV
            echo "OTHER_PM2_APP=dev" >> $GITHUB_ENV
            echo "OTHER_PORT=3347" >> $GITHUB_ENV
          else
            echo "DEPLOY_PATH=/var/www/next" >> $GITHUB_ENV
            echo "PM2_APP_NAME=dev" >> $GITHUB_ENV
            echo "DOMAIN=edutz.galahub.org" >> $GITHUB_ENV
            echo "PORT=3347" >> $GITHUB_ENV
            echo "OTHER_PM2_APP=main" >> $GITHUB_ENV
            echo "OTHER_PORT=3457" >> $GITHUB_ENV
          fi

      - name: Verify Secrets Configuration
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "::error::SSH_PRIVATE_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_HOST }}" ]; then
            echo "::error::VPS_HOST is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VPS_USER }}" ]; then
            echo "::error::VPS_USER is not set"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          DEPLOY_USER: ${{ secrets.VPS_USER }}
          DEPLOY_HOST: ${{ secrets.VPS_HOST }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          PM2_APP_NAME: ${{ env.PM2_APP_NAME }}
          DOMAIN: ${{ env.DOMAIN }}
          PORT: ${{ env.PORT }}
          OTHER_PM2_APP: ${{ env.OTHER_PM2_APP }}
          OTHER_PORT: ${{ env.OTHER_PORT }}
          DEPLOY_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          
          echo "üöÄ Starting deployment for branch ${DEPLOY_BRANCH} to ${DEPLOY_PATH}..."
          echo "üéØ Target domain - ${DOMAIN}"
          echo "üîÑ PM2 Process - ${PM2_APP_NAME}"
          
          # Ensure parent directory exists
          mkdir -p $(dirname ${DEPLOY_PATH})
          
          if [ -d "${DEPLOY_PATH}/.git" ]; then
            cd ${DEPLOY_PATH}
            echo "üì• Pulling latest changes..."
            git fetch origin ${DEPLOY_BRANCH}
            git reset --hard origin/${DEPLOY_BRANCH}
          else
            echo "üîÑ Cloning repository..."
            rm -rf ${DEPLOY_PATH}
            git clone -b ${DEPLOY_BRANCH} git@github.com:galaonlinehub/gala_education_website.git ${DEPLOY_PATH}
            cd ${DEPLOY_PATH}
          fi
          
          # Backup current .env file if it exists
          if [ -f .env ]; then
            cp .env .env.backup
          fi
          
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          echo "üíª Using Node.js version..."
          nvm use 22.14.0
          
          echo "üì¶ Installing pnpm..."
          npm install -g pnpm
          
          echo "üì¶ Installing dependencies..."
          pnpm install --frozen-lockfile
          
          # Restore .env file
          if [ -f .env.backup ]; then
            mv .env.backup .env
          fi
          
          echo "üèóÔ∏è Building application with branch env - ${DEPLOY_BRANCH}"
          echo "üß† Setting Node.js memory limit to 6GB for build process..."
          export NODE_OPTIONS="--max-old-space-size=10240"
          export NEXT_TELEMETRY_DISABLED=1
          
          # Clear cache and build
          rm -rf .next
          pnpm build
          rm -rf .next/cache
          
          echo "üîÑ Restarting PM2 process..."
          if pm2 list | grep -q "${PM2_APP_NAME}"; then
            pm2 stop ${PM2_APP_NAME}
            cd ${DEPLOY_PATH}
            PORT=${PORT} pm2 restart ${PM2_APP_NAME} --update-env
          else
            cd ${DEPLOY_PATH}
            PORT=$PORT pm2 start pnpm --name "${PM2_APP_NAME}" -- start
          fi
          
          if pm2 list | grep -q "${OTHER_PM2_APP}"; then
            PORT=${OTHER_PORT} pm2 restart ${OTHER_PM2_APP} --update-env
          fi
          
          pm2 save
          echo "‚úÖ Deployment completed successfully!"
          EOF

          chmod +x deploy.sh
          scp ./deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/tmp/deploy.sh
          ssh $DEPLOY_USER@$DEPLOY_HOST "DEPLOY_PATH=$DEPLOY_PATH PM2_APP_NAME=$PM2_APP_NAME DOMAIN=$DOMAIN PORT=$PORT OTHER_PM2_APP=$OTHER_PM2_APP OTHER_PORT=$OTHER_PORT DEPLOY_BRANCH=$DEPLOY_BRANCH bash /tmp/deploy.sh"
          ssh $DEPLOY_USER@$DEPLOY_HOST "rm /tmp/deploy.sh"

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          sleep 10
          curl --fail --silent --head https://${DOMAIN} || (echo "‚ùå Deployment verification failed" && exit 1)
          echo "‚úÖ Deployment verified successfully!"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "::error::Deployment failed! Please check the logs for more details."
